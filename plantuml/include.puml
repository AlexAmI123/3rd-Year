@startuml
class assignment1 {
    + {static} Main(args:String[]) : void
}
class Tabconv {
    + Tabconv(inputFile:string, outputFile:string, v:bool, i:bool, o:bool, h:bool, l:bool)
}
class Circle {
    + cx : int
    + cy : int
    + r : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Circle(cx:int, cy:int, r:int, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class CreateSVG {
    + CreateSVG(canvas:List<string>)
}
class "List`1"<T> {
}
CreateSVG --> "canvas<string>" "List`1"
class Ellipse {
    + rx : int
    + ry : int
    + cx : int
    + cy : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Ellipse(rx:int, ry:int, cx:int, cy:int, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Line {
    + x1 : int
    + y1 : int
    + x2 : int
    + y2 : int
    + stroke : string
    + strokeWidth : string
    + Line(x1:int, y1:int, x2:int, y2:int, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Path {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Path(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Polyline {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Polyline(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Polygon {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Polygon(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class assignment1 {
    + {static} Main(args:String[]) : void
}
class Rectangle {
    + x : int
    + y : int
    + width : int
    + height : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Rectangle(x:int, y:int, width:int, height:int, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Caretaker {
    + addMemento(shape:Memento) : void
    + undo() : void
    + redo() : void
    + printMemento() : void
    + CreateMomentoSVG() : void
}
class "List`1"<T> {
}
Caretaker o-> "history<Memento>" "List`1"
Caretaker o-> "redoList<Memento>" "List`1"
class Circle {
    + cx : int
    + cy : int
    + r : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Circle(cx:int, cy:int, r:int, fill:string, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class Ellipse {
    + rx : int
    + ry : int
    + cx : int
    + cy : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Ellipse(rx:int, ry:int, cx:int, cy:int, fill:string, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class Line {
    + x1 : int
    + y1 : int
    + x2 : int
    + y2 : int
    + stroke : string
    + strokeWidth : string
    + Line(x1:int, y1:int, x2:int, y2:int, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class Memento {
    shape : string = ""
    + Memento(shape:string)
    + <<override>> ToString() : string
}
class Path {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Path(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class Polyline {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Polyline(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class Polygon {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Polygon(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class assignment3 {
    + {static} Main(args:String[]) : void
}
assignment3 o-> "caretaker" Caretaker
class Rectangle {
    + x : int
    + y : int
    + width : int
    + height : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Rectangle(x:int, y:int, width:int, height:int, fill:string, stroke:string, strokeWidth:string)
    + printShape(caretaker:Caretaker) : void
}
class Circle {
    + cx : int
    + cy : int
    + r : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Circle(cx:int, cy:int, r:int, fill:string, stroke:string, strokeWidth:string)
    + printShape() : String
}
interface CommandInt {
    Execute() : void
}
class Commands {
    shape : string
    + Commands(shape:string)
    + Execute() : void
    + Undo() : void
    + Redo() : void
    + PrintSVG() : void
    + CreateSVG() : void
    + <<override>> ToString() : string
}
class AddCMD {
    + shape : string
    + AddCMD(shape:String, history:List<string>)
    + Execute() : void
}
class UndoCMD {
    + UndoCMD(history:List<string>, redoList:List<string>)
    + Execute() : void
}
class RedoCMD {
    + RedoCMD(history:List<string>, redoList:List<string>)
    + Execute() : void
}
class PrintSVGCMD {
    + PrintSVGCMD(history:List<string>)
    + Execute() : void
}
class CreateSVGCMD {
    + CreateSVGCMD(history:List<string>)
    + Execute() : void
}
class "List`1"<T> {
}
CommandInt <|-- Commands
CommandInt <|-- AddCMD
AddCMD --> "history<String>" "List`1"
AddCMD --> "redoList<String>" "List`1"
CommandInt <|-- UndoCMD
UndoCMD --> "history<String>" "List`1"
UndoCMD --> "redoList<String>" "List`1"
CommandInt <|-- RedoCMD
RedoCMD --> "history<String>" "List`1"
RedoCMD --> "redoList<String>" "List`1"
CommandInt <|-- PrintSVGCMD
PrintSVGCMD --> "history<String>" "List`1"
CommandInt <|-- CreateSVGCMD
CreateSVGCMD --> "history<String>" "List`1"
class Ellipse {
    + rx : int
    + ry : int
    + cx : int
    + cy : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Ellipse(rx:int, ry:int, cx:int, cy:int, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Line {
    + x1 : int
    + y1 : int
    + x2 : int
    + y2 : int
    + stroke : string
    + strokeWidth : string
    + Line(x1:int, y1:int, x2:int, y2:int, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Path {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Path(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Polyline {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Polyline(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class Polygon {
    + coords : string
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Polygon(coords:string, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
class assignment4 {
    + {static} Main(args:String[]) : void
}
class "List`1"<T> {
}
assignment4 o-> "canvas<string>" "List`1"
assignment4 o-> "redoList<string>" "List`1"
class Rectangle {
    + x : int
    + y : int
    + width : int
    + height : int
    + fill : string
    + stroke : string
    + strokeWidth : string
    + Rectangle(x:int, y:int, width:int, height:int, fill:string, stroke:string, strokeWidth:string)
    + printShape() : string
}
@enduml
